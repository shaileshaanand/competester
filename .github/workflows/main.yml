name: Test and Deploy
on:
    push:
    pull_request:
jobs:
    test_linux:
        name: Linux Tests
        runs-on: ubuntu-latest
        strategy:
            max-parallel: 4
            matrix:
                python-version: [3.7, 3.8]
        steps:
            - uses: actions/checkout@v2
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v1
              with:
                  python-version: ${{ matrix.python-version }}
            - name: Install Dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install --editable .
            - name: Run Tests
              run: |
                  python3 run_tests.py
    test_windows:
        runs-on: windows-latest
        name: Windows Tests
        strategy:
            max-parallel: 4
            matrix:
                python-version: [3.7, 3.8]
        steps:
            - uses: actions/checkout@v2
            - name: Set up Python ${{ matrix.python-version }}
              uses: actions/setup-python@v1
              with:
                  pytohn-version: ${{ matrix.python-version }}
            - name: Set up JDK 1.8
              uses: actions/setup-java@v1
              with:
                  java-version: 1.8
            - name: Install Dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install --editable .
            - name: Run Tests
              run: |
                  python run_tests.py
    publish:
        runs-on: ubuntu-latest
        name: Release and publish to pypi
        needs: [test_linux, test_windows]
        if: github.ref =='refs/heads/master' && startsWith(github.event.head_commit.message, 'v') && endsWith(github.event.head_commit.message, 'release') && github.event_name!='pull_request'
        steps:
            - uses: actions/checkout@v2
            - name: Set up Python
              uses: actions/setup-python@v2
              with:
                  python-version: "3.8"
            - name: Install Dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt
                  pip install setuptools wheel twine
            - name: Get release version
              id: get_release_version
              env:
                  COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
              run: |
                  echo "::set-output name=version::$(echo $COMMIT_MESSAGE|grep -P -o "v[\.0-9]+")"
            - name: Create Release
              id: create_release
              uses: "marvinpinto/action-automatic-releases@latest"
              with:
                  prerelease: false
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  automatic_release_tag: ${{ steps.get_release_version.outputs.version }}
                  title: ${{ steps.get_release_version.outputs.version }}
            - name: Build and Publish
              env:
                  TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
                  TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
              run: |
                  python setup.py sdist bdist_wheel
                  twine upload dist/*
